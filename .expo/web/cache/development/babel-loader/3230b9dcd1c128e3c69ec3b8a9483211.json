{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nvar NavigationBar = NativeModules.NavigationBar;\n\nvar navigationHide = function navigationHide() {\n  return _regeneratorRuntime.async(function navigationHide$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context.next = 4;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.navigationHide());\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar navigationShow = function navigationShow() {\n  return _regeneratorRuntime.async(function navigationShow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.navigationShow());\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar leanBack = function leanBack() {\n  return _regeneratorRuntime.async(function leanBack$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context3.next = 4;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.leanBack());\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar immersive = function immersive() {\n  return _regeneratorRuntime.async(function immersive$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context4.next = 4;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.immersive());\n\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar stickyImmersive = function stickyImmersive() {\n  return _regeneratorRuntime.async(function stickyImmersive$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context5.next = 4;\n            break;\n          }\n\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.stickyImmersive());\n\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lowProfile = function lowProfile() {\n  return _regeneratorRuntime.async(function lowProfile$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context6.next = 4;\n            break;\n          }\n\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.lowProfile());\n\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lightNavigationBar = function lightNavigationBar(light) {\n  return _regeneratorRuntime.async(function lightNavigationBar$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context7.next = 4;\n            break;\n          }\n\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.lightNavigationBar(light || false));\n\n        case 3:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar setNavigationColor = function setNavigationColor(color, light) {\n  return _regeneratorRuntime.async(function setNavigationColor$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context8.next = 4;\n            break;\n          }\n\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.setNavigationColor(processColor(color), color === 'translucent', light || false));\n\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar setNavigationBarDividerColor = function setNavigationBarDividerColor(color) {\n  return _regeneratorRuntime.async(function setNavigationBarDividerColor$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context9.next = 4;\n            break;\n          }\n\n          _context9.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.setNavigationBarDividerColor(processColor(color)));\n\n        case 3:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar setNavigationBarContrastEnforced = function setNavigationBarContrastEnforced(enforceContrast) {\n  return _regeneratorRuntime.async(function setNavigationBarContrastEnforced$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context10.next = 4;\n            break;\n          }\n\n          _context10.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.setNavigationBarContrastEnforced(enforceContrast || false));\n\n        case 3:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar fullScreen = function fullScreen(enable) {\n  return _regeneratorRuntime.async(function fullScreen$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context11.next = 4;\n            break;\n          }\n\n          _context11.next = 3;\n          return _regeneratorRuntime.awrap(NavigationBar.fullScreen(enable || false));\n\n        case 3:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 4:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar SystemNavigationBar = {\n  navigationHide: navigationHide,\n  navigationShow: navigationShow,\n  leanBack: leanBack,\n  immersive: immersive,\n  stickyImmersive: stickyImmersive,\n  lowProfile: lowProfile,\n  lightNavigationBar: lightNavigationBar,\n  setNavigationColor: setNavigationColor,\n  setNavigationBarDividerColor: setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced: setNavigationBarContrastEnforced,\n  fullScreen: fullScreen\n};\nexport default SystemNavigationBar;","map":{"version":3,"sources":["index.tsx"],"names":["NavigationBar","navigationHide","Platform","navigationShow","leanBack","immersive","stickyImmersive","lowProfile","lightNavigationBar","light","setNavigationColor","processColor","color","setNavigationBarDividerColor","setNavigationBarContrastEnforced","enforceContrast","fullScreen","enable","SystemNavigationBar"],"mappings":"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","sourcesContent":["import { NativeModules, Platform, processColor } from 'react-native';\n\nconst { NavigationBar } = NativeModules;\n\nconst navigationHide = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationHide();\n  }\n};\n\nconst navigationShow = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationShow();\n  }\n};\n\nconst leanBack = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.leanBack();\n  }\n};\n\nconst immersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.immersive();\n  }\n};\n\nconst stickyImmersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.stickyImmersive();\n  }\n};\n\nconst lowProfile = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lowProfile();\n  }\n};\n\nconst lightNavigationBar = async (light?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lightNavigationBar(light || false);\n  }\n};\n\nconst setNavigationColor = async (color: string | number, light?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationColor(\n      processColor(color),\n      color === 'translucent',\n      light || false\n    );\n  }\n};\n\nconst setNavigationBarDividerColor = async (color: string | number) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarDividerColor(\n      processColor(color)\n    );\n  }\n};\n\nconst setNavigationBarContrastEnforced = async (enforceContrast?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarContrastEnforced(\n      enforceContrast || false\n    );\n  }\n};\n\nconst fullScreen = async (enable?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.fullScreen(enable || false);\n  }\n};\n\nvar SystemNavigationBar = {\n  navigationHide,\n  navigationShow,\n  leanBack,\n  immersive,\n  stickyImmersive,\n  lowProfile,\n  lightNavigationBar,\n  setNavigationColor,\n  setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced,\n  fullScreen,\n};\n\nexport default SystemNavigationBar;\n"]},"metadata":{},"sourceType":"module"}